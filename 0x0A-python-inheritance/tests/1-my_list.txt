1. Print sorted module
======================

Import module:
==============
	>>> MyList = __import__('1-my_list').MyList
	

Test case #0

	>>> my_list = MyList([1, 2, 3, 4, 5])
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	
Test cases #1

	>>> my_list = MyList([1, 5, 4, 3, 2])
	>>> print(my_list)
	[1, 5, 4, 3, 2]
	>>> my_list.append(6)
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5, 6]

Test case #2

	>>> my_list = MyList()
	>>> type(my_list)
	<class '1-my_list.MyList'>

	>>> issubclass(MyList, list)
	True

	>>> 'print_sorted' in dir(MyList)
	True

Test case #3

	>>> my_list = MyList([4, 2, 3, 1, 5])
	>>> print(my_list)
	[4, 2, 3, 1, 5]
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

Test case #4

	>>> my_list = MyList([-4, 2, 3, 1, 5])
	>>> my_list.print_sorted()
	[-4, 1, 2, 3, 5]

Test case #5

	>>> my_list = MyList([-4, -3, -1, -2, -5])
	>>> my_list.print_sorted()
	[-5, -4, -3, -2, -1]

Test case #6

	>>> my_list = MyList([1.1, 3.3, 4.4, 2.2, 5.5])
	>>> my_list.print_sorted()
	[1.1, 2.2, 3.3, 4.4, 5.5]

Test case #7

	>>> my_list = MyList(["e", "d", "a", "c", "b"])
	>>> my_list.print_sorted()
	['a', 'b', 'c', 'd', 'e']

Test case #9

	>>> my_list = MyList([1])
	>>> my_list.print_sorted()
	[1]

Test case #9

	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

Test case #10

	>>> my_list = MyList([])
	>>> my_list.print_sorted()
	[]

Test case #11

	>>> my_list = MyList(1)
	Traceback (most recent call last):
	...
	TypeError: 'int' object is not iterable

Test case #12

	>>> my_list.print_sorted([3, 1, 2])
	Traceback (most recent call last):
	...
	TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

